(include "./foundation.neut")

(include "./functor.neut")

(include "./monad.neut")

(include "./identity.neut")

(inductive free ((g (hom tau tau)) (a tau))
  (leaf
    ((_ a))
    (free g a))
  (node
    ((b tau)
     (_ (g b))
     (_ (hom b (free g a))))
    (free g a)))

(section free)

(define map
  ((g (hom tau tau)))
  (witness (functor-type (free g _))
    (λ (a b f m)
      (free.case (free g b) g a m
        (λ (x)
          (leaf g b (f x)))
        (λ (p val k)
          (with identity.bind
            (let f'
              (λ ((z p))
                ((map g) a b f (k z))))
            (node g b p val f')))))))

(define as-functor
  ((g (hom tau tau)))
  (witness (functor (free g _))
    (functor.new
      (free g _)
      (free.map g))))

(define return
  ((g (hom tau tau)))
  (witness (return-type (free g _))
    (λ (a x)
      (leaf g a x))))

(define bind
  ((g (hom tau tau)))
  (witness (bind-type (free g _))
    (λ (a b m k)
      (free.case (free g b) g a m
        (λ (x)
          (k x))
        (λ (p val k')
          (node g b p val
            (λ (v) ((bind g) a b (k' v) k))))))))

(define as-monad
  ((g (hom tau tau)))
  (witness (monad (free g _))
    (monad.new
      (free g _)
      (free.as-functor g)
      (free.return g)
      (free.bind g))))

(end free)
