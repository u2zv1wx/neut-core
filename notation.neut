;; define basic notations

(notation (recursive-0 f e)
  (f e))

(notation (recursive-0 f e e+)
  ((splice (f e)) (splice (recursive-0 f e+))))

(notation (recursive-1 f k e)
  (f k e))

(notation (recursive-1 f k e e+)
  ((splice (f k e)) (splice (recursive-1 f k e+))))

(notation (with-erasure-base k e)
  ((erase (k) e)))

(notation (with-erasure k e+)
  (splice (recursive-1 with-erasure-base k e+)))

(notation type
  tau)

(notation universe
  tau)

(notation forall
  pi)

(notation Π
  pi)

(notation switch
  enum-elimination)

(notation lambda
  pi-introduction)

(notation λ
  pi-introduction)

(notation (witness t e)
  ((λ ((x t)) x) e))

(notation (hom t)
  t)

(notation (hom t rest+)
  (Π
    ((_ t))
    (hom rest+)))

(notation (theorem x t e)
  (let (x t) e))

(notation assume
  pi-introduction)

(notation (if b e1 e2)
  (switch b
    (bool.true
      e1)
    (bool.false
      e2)))

(notation (define f xts e)
  (let f (fix f xts e)))

(notation (define f e)
  (let f e))

(notation (to-type-list-base t)
  ((_ t)))

(notation (to-type-list t+)
  (recursive-0 to-type-list-base t+))

(notation (with-erasure-plus-base k (x t))
  ((x (erase (k) t))))

(notation (with-erasure-plus k xt+)
  (recursive-1 with-erasure-plus-base k xt+))

(notation (sigma (xt+) t)
  (Π
    ((internal.sigma-tau tau)
     (_ (Π (with-erasure-plus internal.sigma-tau xt+ (_ t)) internal.sigma-tau)))
    internal.sigma-tau))

(notation ∑
  sigma)

(notation (product t+)
  (Π
    ((internal.sigma-tau taux)
     (_ (Π (to-type-list (with-erasure internal.sigma-tau t+)) internal.sigma-tau)))
    internal.sigma-tau))

(notation (to-asterisk-list-base e)
  ((_ *)))

(notation (to-asterisk-list t+)
  (recursive-0 to-asterisk-list-base t+))

(notation (sigma-introduction)
  (λ
    ((internal.sigma-tau tau)
     (internal.sigma-lambda (Π () internal.sigma-tau)))
    (internal.sigma-lambda)))

(notation (sigma-introduction e+)
  (λ
    ((internal.sigma-tau tau)
     (internal.sigma-lambda (Π (to-asterisk-list e+) internal.sigma-tau)))
    (internal.sigma-lambda (with-erasure internal.sigma-lambda e+))))

(notation (sigma-elimination () e1 e2)
  (e1 * (λ () e2)))

(notation (sigma-elimination (xt+) e1 e2)
  (e1 * (λ (xt+) e2)))

(notation tuple
  sigma-introduction)

(notation construct
  sigma-introduction)

(notation (destruct e xts rest+)
  (sigma-elimination xts e (with identity.bind rest+)))
