(no-implicit-core)

;; define basic notations

;; synonyms
(notation type
  tau)

(notation universe
  tau)

(notation forall
  pi)

(notation Π
  pi)

(notation switch
  enum-elimination)

(notation lambda
  pi-introduction)

(notation λ
  pi-introduction)

(notation (witness t e)
  ((λ ((x t)) x) e))

(notation (hom t)
  t)

(notation (hom t rest+)
  (Π
    ((_ t))
    (hom rest+)))

(notation (theorem x t e)
  (let (x t) e))

(notation assume
  pi-introduction)

(notation (if b e1 e2)
  (switch b
    (bool.true
      e1)
    (bool.false
      e2)))

(notation (define f xts e)
  (let f (fix f xts e)))

(notation (define f e)
  (let f e))

(notation (to-type-list t)
  ((_ t)))

(notation (to-type-list t t+)
  ((_ t) (splice (to-type-list t+))))

(notation (sigma (xt+) t)
  (Π
    ((c tau)
     (_ (Π (xt+ (_ t)) c)))
    c))

(notation ∑
  sigma)

(notation (product t+)
  (Π
    ((c tau)
     (_ (Π (to-type-list t+) c)))
    c))

(notation (to-asterisk-list e)
  ((_ *)))

(notation (to-asterisk-list e e+)
  ((_ *) (splice (to-asterisk-list e+))))

(notation (sigma-introduction)
  (λ
    ((elim-result-type tau)
     (k (Π () elim-result-type)))
    (k)))

(notation (sigma-introduction e+)
  (λ
    ((elim-result-type tau)
     (k (Π (to-asterisk-list e+) elim-result-type)))
    (k e+)))

(notation (sigma-elimination () e1 e2)
  (e1 * (λ () e2)))

(notation (sigma-elimination (xt+) e1 e2)
  (e1 * (λ (xt+) e2)))

(notation tuple
  sigma-introduction)

(notation construct
  sigma-introduction)

(notation (destruct e xts rest+)
  (sigma-elimination xts e (with identity.bind rest+)))
