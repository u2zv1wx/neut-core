;; state.neut
(no-implicit-core)

(include "./functor.neut")

(include "./monad.neut")

(use top)

(define state
  ((s tau))
  (witness (hom tau tau)
    (λ (a)
      (hom s (product s a)))))

(section state)

(define map
  ((s tau))
  (witness (functor-type (state s))
    (λ (_ _ f m)
      (λ (env)
        (destruct (m env)
          (new-env val)
          (tuple new-env (f val)))))))

(define return
  ((s tau))
  (witness (return-type (state s))
    (λ (_ x)
      (λ (env)
        (tuple env x)))))

(define bind
  ((s tau))
  (witness (bind-type (state s))
    (λ (_ _ comp k)
      (λ (env)
        (destruct (comp env)
          (new-env val)
          ((k val) new-env))))))

(define get
  ((s tau))
  (witness ((state s) s)
    (λ (env) (tuple env env))))

(define put
  ((s tau)
   (env s))
  (witness ((state s) top)
    (λ (_) (tuple env unit))))

(define as-functor
  ((s tau))
  (witness (functor (state s))
    (functor.new
      (state s)
      (state.map s))))

(define as-monad
  ((s tau))
  (witness (monad (state s))
    (monad.new
      (state s)
      (state.as-functor s)
      (state.return s)
      (state.bind s))))

(end state)
