(include "./notation.neut")

(section os)

(declare-constant file-descriptor tau)

(declare-constant stdin file-descriptor)

(declare-constant stdout file-descriptor)

(declare-constant stderr file-descriptor)

; (declare-constant read
;   (Π
;     ((A i64)
;      (in file-descriptor)
;      (buf (array A i8))
;      (len i64))
;     (product (array A i8) i64)))

; (declare-constant write
;   (Π
;     ((A i64)
;      (out file-descriptor)
;      (str (array A i8))
;      (len i64))
;     (product (array A i8) i64)))

(define exit ((A tau) (status i64))
  (syscall 60 A (arg-immediate status)))

; (declare-constant exit
;   (Π
;     ((A tau)
;      (status i64))
;     A))

; (declare-constant open
;   (Π
;     ((A i64)
;      (path (array A i8))
;      (flags i64)
;      (mode i64))
;     (product (array A i8) file-descriptor)))

; (declare-constant close
;   (Π
;     ((_ file-descriptor))
;     i64))

; (declare-constant fork
;   (Π
;     ()
;     i64))

; (define rusage
;   (struct
;     i64   ; ru_utime           user CPU time used
;     i64   ; (microsec)
;     i64   ; ru_stime           system CPU time used
;     i64   ; (microsec)
;     i64   ; ru_maxrss;         maximum resident set size
;     i64   ; ru_ixrss;          integral shared memory size
;     i64   ; ru_idrss;          integral unshared data size
;     i64   ; ru_isrss;          integral unshared stack size
;     i64   ; ru_minflt;         page reclaims (soft page faults)
;     i64   ; ru_majflt;         page faults (hard page faults)
;     i64   ; ru_nswap;          swaps
;     i64   ; ru_inblock;        block input operations
;     i64   ; ru_oublock;        block output operations
;     i64   ; ru_msgsnd;         IPC messages sent
;     i64   ; ru_msgrcv;         IPC messages received
;     i64   ; ru_nsignals;       signals received
;     i64   ; ru_nvcsw;          voluntary context switches
;     i64)) ; ru_nivcsw;         involuntary context switches

; (declare-constant wait4
;   (Π
;     ((d i64)
;      (stat-loc (array 1 i64))
;      (options i64)
;      (usage rusage))
;     (product (array 1 i64) rusage i64)))

; (define sockaddr
;   (struct
;     i8    ; total length
;     i8    ; address family
;     i16   ; empty (4 byte so far)
;     i32   ; empty (8 byte so far)
;     i64)) ; empty (16 byte so far)

; (define sockaddr-in
;   (struct
;     i8    ; total length
;     i8    ; address family
;     i16   ; ipv4 port
;     i32   ; ipv4 addr
;     i64)) ; empty

; (define sockaddr-in6
;   (struct
;     i8    ; length of this struct
;     i8    ; AF_INET6
;     i16   ; Transport layer port
;     i32   ; IP6 flow information
;     i32   ; IP6 address
;     i32)) ; scope zone index

; (declare-constant bind
;   (Π
;     ((sock i64)
;      (address sockaddr)
;      (sock-len i64))
;     (product sockaddr i64)))

; (declare-constant accept
;   (Π
;     ((sock i64)
;      (address sockaddr)
;      (address-len (array 1 i64)))
;     (product sockaddr (array 1 i64) i64)))

; (declare-constant connect
;   (Π
;     ((sock i64)
;      (address sockaddr)
;      (address-len i64))
;     (product sockaddr i64)))

; (declare-constant socket
;   (Π
;     ((domain i64)
;      (socket-type i64)
;      (protocol i64))
;     i64))

; (declare-constant listen
;   (Π
;     ((sock i64)
;      (backlog i64))
;     i64))

(end os)
