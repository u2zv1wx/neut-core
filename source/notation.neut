(declare-enum-meta top unit)

(declare-enum-meta bool true false)

(define-macro force-meta (f)
  (f))

; (define-macro if-meta (cond on-true on-false)
;   (switch-meta (force-meta cond)
;     (bool.true (force-meta on-true))
;     (bool.false (force-meta on-false))))
; (auto-thunk if-meta)

(define-macro init-meta (xs)
  (if-meta (is-nil (tail xs))
    `()
    (cons (head xs) (init-meta (tail xs)))))

(define-macro last-meta (xs)
  (if-meta (is-nil (tail xs))
    (head xs)
    (last-meta (tail xs))))

(define-macro map-meta (f xs)
  (if-meta (is-nil xs)
    xs
    (cons (f (head xs)) (map-meta f (tail xs)))))

(define-macro filter-meta (p xs)
  (if-meta (is-nil xs)
    xs
    (if-meta (p (head xs))
      (cons (head xs) (filter-meta p (tail xs)))
      (filter-meta p (tail xs)))))

(define-macro append-meta (xs ys)
  (if-meta (is-nil xs)
    ys
    (cons (head xs) (append-meta (tail xs) ys))))

;
; foundational macros
;

(define-macro tau `tau)

(define-macro * `*)

; fixme: int, floatを対象言語に落とす方法を考える。たぶんleaf/nodeの一種として読むようにしてやればいいけど。
; （というかメタ言語にint/floatっているか？リストについての再帰でよくね）

(define-macro Π (args body)
  `(Π #args #body))

(define-macro Π-introduction (args body)
  `(Π-introduction #args #body))

(define-macro-variadic Π-elimination (fun args)
  (append-meta `(Π-elimination #fun) args))

(define-macro fix (self args body)
  `(fix #self #args #body))

(define-macro-variadic enum-elimination (value clauses)
  (append-meta `(enum-elimination #value) clauses))

(define-macro array (dom kind)
  `(array #dom #kind))

(define-macro-variadic array-introduction (kind values)
  (append-meta `(array-introduction #kind) values))

(define-macro array-elimination (kind xts arr cont)
  `(array-elimination #kind #xts #arr #cont))

(define-macro-variadic struct (kinds)
  (append-meta `(struct) kinds))

; kes = ((kind-1 term-1) ... (kind-n term-n))
(define-macro-variadic struct-introduction (kes)
  (append-meta `(struct-introduction) kes))

(define-macro struct-elimination (xts e1 e2)
  `(struct-elimination #xts #e1 #e2))

(define-macro question (e)
  `(question #e))

; (define-macro erase (mxs body)
;   `(erase #mxs #body))

(define-macro irreducible (e)
  `(irreducible #e))

;
; statements
;

(define-macro declare-constant (name t)
  `(declare-constant #name #t))

(define-macro-variadic declare-enum (rest)
  (append-meta `(declare-enum) rest))

(define-macro end (arg)
  `(end #arg))

; (define-macro data (name xts rest)
;   `(data #name #xts #rest))

(define-macro-variadic data (rest)
  (append-meta `(data) rest))

(define-macro-variadic define (f rest)
  (if-meta (is-nil (tail rest))
    `(let #f #(head rest))
    (define f
      `(fix #f #(head rest) #(head (tail rest))))))

(define-macro-variadic record (name xts rest)
  (append-meta `(record #name #xts) rest))

(define-macro section (arg)
  `(section #arg))

(define-macro-variadic statement (stmt-list)
  (append-meta `(statement) stmt-list))

(define-macro use (arg)
  `(use #arg))

(define-macro unuse (arg)
  `(unuse #arg))

;
; auxiliary macros
;

(define-macro type
  tau)

(define-macro universe
  type)

(define-macro forall
  Π)

(define-macro Pi
  Π)

(define-macro lambda
  Π-introduction)

(define-macro λ
  Π-introduction)

(define-macro witness (t e)
  (begin-meta
    (let sym (new-symbol))
    `(#(λ `((#sym #t)) sym) #e)))

(define-macro hom-internal (ts)
  (if-meta (is-nil (tail ts))
    (head ts)
    (Π `((_ #(head ts))) (hom-internal (tail ts)))))

(define-macro-variadic hom (ts)
  (hom-internal ts))

(define-macro theorem (x t e)
  `(let (#x #t) #e))

(define-macro assume
  Π-introduction)

(define-macro switch
  enum-elimination)

(define-macro if (cond on-true on-false)
  (switch cond
    `(bool.true #on-true)
    `(bool.false #on-false)))

(define-macro sigma (xts t)
  (begin-meta
    (let sym (new-symbol))
    (forall `((#sym #tau)
              (_ #(forall (append-meta xts `((_ #t))) sym)))
             sym)))

(define-macro exists
  sigma)

(define-macro product-internal (ts)
  (begin-meta
    (let sym (new-symbol))
    (Π `((#sym #tau)
         (_ #(Π (map-meta (lambda-meta (t) `(_ #t)) ts) sym)))
        sym)))

(define-macro-variadic product (ts)
  (product-internal ts))

(define-macro sigma-introduction-internal (es)
  (begin-meta
    (let Z (new-symbol))
    (let k (new-symbol))
    (lambda
      `((#Z #tau)
        (#k #(Π (map-meta (lambda-meta (x) `(_ *)) es) Z)))
      (append-meta `(#k) es))))

(define-macro-variadic sigma-introduction (es)
  (sigma-introduction-internal es))

(define-macro sigma-elimination (xts e1 e2)
  `(#e1 * #(lambda xts e2)))

(define-macro tuple
  sigma-introduction)

(define-macro construct
  sigma-introduction)

(define-macro and-meta (b1 b2)
  (if-meta b1
    (if-meta b2
      bool.true
      bool.false)
    bool.false))

(define-macro or-meta (b1 b2)
  (if-meta b1
    bool.true
    (if-meta b2
      bool.true
      bool.false)))

(define-macro xor-meta (b1 b2)
  (if-meta b1
    (if-meta b2
      bool.false
      bool.true)
    (if-meta b2
      bool.true
      bool.false)))

(define-macro not-meta (b)
  (if-meta b
    bool.false
    bool.true))

(define-macro identity-bind-meta (x k)
  (k x))

(define-macro is-borrowed-var-meta (x)
  (if-meta (is-node x)
    bool.false
    (leaf-equal `& (head (leaf-uncons x)))))

(define-macro take-borrowed-vars-meta (xs)
  (map-meta (lambda-meta (x) (nth 1 (leaf-uncons x))) (filter-meta is-borrowed-var-meta xs)))

(define-macro drop-char-meta (ch x)
  (if-meta (is-node x)
    x
    (begin-meta
      (let c-rest (leaf-uncons x))
      (if-meta (leaf-equal (nth 0 c-rest) ch)
        (nth 1 c-rest)
        x))))

(define-macro obtain-borrow-info-meta (xs)
  (if-meta (is-leaf xs)
    `(()
      #xs)
    `(#(take-borrowed-vars-meta xs)
      #(map-meta (lambda-meta (x) (drop-char-meta `& x)) xs))))

; fixme: condで書き直したほうがわかりやすい。condをコンパイラ内部で定義するとよい？
(define-macro with-internal (bind es)
  (if-meta (is-nil (tail es))
    (head es)
    (begin-meta
      (let e (head es))
      (let rest (tail es))
      (if-meta (is-leaf e)
        `(#bind * * #e #(λ `(_) (with-internal bind rest)))
        (if-meta (leaf-equal (nth 0 e) `erase)
          (begin-meta
            (let erased-vars (tail e))
            `(erase #erased-vars #(with-internal bind rest)))
          (if-meta (not-meta (leaf-equal (nth 0 e) `let))
            (with-internal bind (append-meta `((let _ #e)) rest))
            (begin-meta
              (let var-name (nth 1 e))
              (let let-body (tail (tail e)))
              (let last-term (last-meta let-body))
              (let borrow-info (obtain-borrow-info-meta last-term))
              (let borrow-var-list (nth 0 borrow-info))
              (let var-list (append-meta borrow-var-list `(#var-name)))
              (let let-body' (append-meta (init-meta let-body) `(#(nth 1 borrow-info))))
              (let s (new-symbol))
              (if-meta (is-nil borrow-var-list)
                `(#bind * * #(with-internal bind let-body) #(λ `(#var-name) (with-internal bind rest)))
                (with-internal bind
                  `(#(append-meta `(let #s) let-body')
                    #(sigma-elimination var-list s (with-internal bind rest))))))))))))

(define-macro-variadic with (bind es)
  (with-internal bind es))

(define-macro-variadic destruct (e xts rest)
  (sigma-elimination xts e (with-internal `identity.bind rest)))

(define-macro-variadic reduce (es)
  (with-internal `identity.bind es))
