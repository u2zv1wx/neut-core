(include "./foundation.neut")

(include "./functor.neut")

(include "./monad.neut")

(section option)

(inductive option ((a tau))
  (none ()
    (option a))
  (some ((x a))
    (option a)))

(define map
  (witness (functor-type option)
    (λ (a b f m)
      (option.case * * m
        (λ ()
          (none b))
        (λ (x)
          (some b (f x)))))))

(define return
  (witness (return-type option)
    (λ (a x)
      (some a x))))

(define bind
  (witness (bind-type option)
    (λ (a b m k)
      (option.case (option b) a m
        (λ ()
          (none b))
        (λ (x)
          (k x))))))

(define from-option
  ((a tau)
   (x a)
   (m (option a)))
  (witness a
    (option.case a a m
      (λ ()
        x)
      (λ (y)
        y))))

(define as-functor
  (witness (functor option)
    (functor.new
      option
      option.map)))

?functor.map

(define as-monad
  (witness (monad option)
    (monad.new
      option
      option.as-functor
      option.return
      option.bind)))

(end option)
