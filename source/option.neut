(include "./foundation.neut")

(include "./functor.neut")

(include "./monad.neut")

(define-data option ((a tau))
  (none)
  (some (value a)))

(section option)

(define map
  (witness (functor-type option)
    (λ (a b f m)
      (case m
        ((none)
          (none b))
        ((some x)
          (some b (f x)))))))

(define return
  (witness (return-type option)
    (λ (a x)
      (some a x))))

(define bind
  (witness (bind-type option)
    (λ (a b m k)
      (case m
        ((none)
          (none b))
        ((some x)
          (k x))))))

(define from-option
  ((a tau)
   (x a)
   (m (option a)))
  (witness a
    (case m
      ((none)
        x)
      ((some y)
        y))))

(define as-functor
  (witness (functor option)
    (functor.new
      option
      option.map)))

(define as-monad
  (witness (monad option)
    (monad.new
      option
      option.as-functor
      option.return
      option.bind)))

(end option)
