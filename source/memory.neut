(include "./foundation.neut")

(include "./identity.neut")

(section memory)

(define deallocate ((A tau) (x A))
  (derangement (external free) i1 (affine x)))

(define allocate ((size i64))
  (derangement (external malloc) unsafe.pointer (affine size)))

(define calculate-pointer ((p unsafe.pointer) (offset i64))
  (witness unsafe.pointer
    (with identity.bind
      (let p' (unsafe.cast unsafe.pointer i64 p))
      (let new-pointer (add-i64 p' offset))
      (unsafe.cast i64 unsafe.pointer new-pointer))))

; `(,(store i8) some-pointer value)みたいにして使う。
(define-macro store (low-type)
  (begin-meta
    (let ptr (meta.leaf.new-symbol `ptr))
    (let value (meta.leaf.new-symbol `value))
    (let high-type (meta.leaf.new-symbol `high-type))
    (lambda `((,high-type tau) (,ptr unsafe.pointer) (,value ,high-type))
      `(derangement (store ,low-type) top (affine ,ptr) (affine ,value)))))

; こうしておくと、((load-mod i8) foo bar) みたいに使えて便利。
(define-macro load (low-type)
  (begin-meta
    (let high-type (meta.leaf.new-symbol `high-type))
    (let ptr (meta.leaf.new-symbol `ptr))
    (lambda `((,high-type tau) (,ptr unsafe.pointer))
      `(derangement (load ,low-type) ,high-type (affine ,ptr)))))

(define-macro store-with-offset (low-type offset)
  (begin-meta
    (let q (meta.leaf.new-symbol `pointer))
    (let ptr (meta.leaf.new-symbol `ptr))
    (let value (meta.leaf.new-symbol `value))
    (let high-type (meta.leaf.new-symbol `high-type))
    (lambda `((,high-type tau) (,value ,high-type) (,ptr unsafe.pointer))
      (with `identity.bind
        `(let ,q (memory.calculate-pointer ,ptr ,offset))
        `(,(memory.store low-type) ,high-type ,q ,value)
        `top.unit))))

(define-macro load-with-offset (low-type offset)
  (begin-meta
    (let q (meta.leaf.new-symbol `pointer))
    (let value (meta.leaf.new-symbol `value))
    (let ptr (meta.leaf.new-symbol `ptr))
    (let high-type (meta.leaf.new-symbol `high-type))
    (lambda `((,high-type tau) (,ptr unsafe.pointer))
      (with `identity.bind
        `(let ,q (memory.calculate-pointer ,ptr ,offset))
        `(let ,value (,(memory.load low-type) ,high-type ,q))
        value))))

(define-macro store-with-index (low-type index)
  (begin-meta
    (let elem-size (meta.leaf.from-int (meta.size-of low-type)))
    (store-with-offset low-type `(mul-i64 ,elem-size ,index))))

(define-macro load-with-index (low-type index)
  (begin-meta
    (let elem-size (meta.leaf.from-int (meta.size-of low-type)))
    (load-with-offset low-type `(mul-i64 ,elem-size ,index))))

(end memory)
