(include "./foundation.neut")

(include "./identity.neut")

(section memory)

(define allocate ((size i64))
  (derangement (external malloc) unsafe.pointer (affine size)))

(define deallocate ((A tau) (x A))
  (derangement (external free) top (affine x)))

(define add-pointer ((p unsafe.pointer) (offset i64))
  (unsafe.cast i64 unsafe.pointer (add-i64 (unsafe.cast unsafe.pointer i64 p) offset)))

; (define-irreducible add-pointer-mod ((p unsafe.pointer) (offset i64))
;   (witness (product unsafe.pointer unsafe.pointer)
;     (with identity.bind
;       (let ptr-mod (unsafe.cast i64 unsafe.pointer (add-i64 (unsafe.cast unsafe.pointer i64 p) offset)))
;       (tuple p ptr-mod))))

(define sub-pointer ((p unsafe.pointer) (offset i64))
  (unsafe.cast i64 unsafe.pointer (sub-i64 (unsafe.cast unsafe.pointer i64 p) offset)))

(define store-i8 ((ptr unsafe.pointer) (value i8))
  (derangement (store i8) top (affine ptr) (affine value)))
(define store-i16 ((ptr unsafe.pointer) (value i16))
  (derangement (store i16) top (affine ptr) (affine value)))
(define store-i32 ((ptr unsafe.pointer) (value i32))
  (derangement (store i32) top (affine ptr) (affine value)))
(define store-i64 ((ptr unsafe.pointer) (value i64))
  (derangement (store i64) top (affine ptr) (affine value)))
(define store-f16 ((ptr unsafe.pointer) (value f16))
  (derangement (store f16) top (affine ptr) (affine value)))
(define store-f32 ((ptr unsafe.pointer) (value f32))
  (derangement (store f32) top (affine ptr) (affine value)))
(define store-f64 ((ptr unsafe.pointer) (value f64))
  (derangement (store f64) top (affine ptr) (affine value)))
(define store-pointer ((ptr unsafe.pointer) (value unsafe.pointer))
  (derangement (store (pointer i8)) top (affine ptr) (affine value)))

; (define-irreducible store-i8 ((ptr unsafe.pointer) (value i8))
;   (derangement (store i8) top (linear ptr) (affine value)))
; ; (define store-i16 ((ptr unsafe.pointer) (value i16))
; ;   (derangement (store i16) top (linear ptr) (affine value)))
; ; (define store-i32 ((ptr unsafe.pointer) (value i32))
; ;   (derangement (store i32) top (linear ptr) (affine value)))
; (define-irreducible store-i64 ((ptr unsafe.pointer) (value i64))
;   (derangement (store i64) top (linear ptr) (affine value)))
; ; (define store-f16 ((ptr unsafe.pointer) (value f16))
; ;   (derangement (store f16) top (linear ptr) (affine value)))
; ; (define store-f32 ((ptr unsafe.pointer) (value f32))
; ;   (derangement (store f32) top (linear ptr) (affine value)))
; ; (define store-f64 ((ptr unsafe.pointer) (value f64))
; ;   (derangement (store f64) top (linear ptr) (affine value)))
; (define-irreducible store-pointer ((ptr unsafe.pointer) (value unsafe.pointer))
;   (derangement (store (pointer i8)) top (linear ptr) (affine value)))

; (define-irreducible store-i8-with-index ((value i8) (ptr unsafe.pointer) (index i64))
;   (witness (product unsafe.pointer top)
;     (with identity.bind
;       (let ptr-mod (add-pointer-mod &ptr (mul-i64 1 index)))
;       (store-i8 &ptr-mod value)
;       (tuple ptr top.unit))))

; (define store-i8-with-index ((value i8) (ptr unsafe.pointer) (index i64))
;   (witness (product unsafe.pointer top)
;     (with identity.bind
;       (let ptr-mod (add-pointer-mod &ptr (mul-i64 1 index)))
;       (store-i8 &ptr-mod value)
;       (tuple ptr top.unit))))


; (define store-i64-with-index ((value i64) (ptr unsafe.pointer) (index i64))
;   (witness (product unsafe.pointer top)
;     (with identity.bind
;       (let ptr-mod (add-pointer ptr (mul-i64 8 index)))
;       (store-i64 ptr-mod value)
;       (tuple ptr top.unit))))

; (define-irreducible store-i64-with-index ((value i64) (ptr unsafe.pointer) (index i64))
;   (witness (product unsafe.pointer top)
;     (with identity.bind
;       (let ptr-mod (add-pointer-mod &ptr (mul-i64 8 index)))
;       (store-i64 &ptr-mod value)
;       (tuple ptr top.unit))))

(define store-i8-with-index ((value i8) (ptr unsafe.pointer) (index i64))
  (store-i8 (add-pointer ptr (mul-i64 1 index)) value))
(define store-i16-with-index ((value i16) (ptr unsafe.pointer) (index i64))
  (store-i16 (add-pointer ptr (mul-i64 2 index)) value))
(define store-i32-with-index ((value i32) (ptr unsafe.pointer) (index i64))
  (store-i32 (add-pointer ptr (mul-i64 4 index)) value))
(define store-i64-with-index ((value i64) (ptr unsafe.pointer) (index i64))
  (store-i64 (add-pointer ptr (mul-i64 8 index)) value))
(define store-f16-with-index ((value f16) (ptr unsafe.pointer) (index i64))
  (store-f16 (add-pointer ptr (mul-i64 2 index)) value))
(define store-f32-with-index ((value f32) (ptr unsafe.pointer) (index i64))
  (store-f32 (add-pointer ptr (mul-i64 4 index)) value))
(define store-f64-with-index ((value f64) (ptr unsafe.pointer) (index i64))
  (store-f64 (add-pointer ptr (mul-i64 8 index)) value))
(define store-pointer-with-index ((value unsafe.pointer) (ptr unsafe.pointer) (index i64))
  (store-pointer (add-pointer ptr (mul-i64 8 index)) value))

; (define-irreducible store-pointer-with-index ((value unsafe.pointer) (ptr unsafe.pointer) (index i64))
;   (witness (product unsafe.pointer top)
;     (with identity.bind
;       (let ptr-mod (add-pointer-mod &ptr (mul-i64 8 index)))
;       (store-pointer &ptr-mod value)
;       (tuple ptr top.unit))))


; (define-irreducible load-i8 ((ptr unsafe.pointer))
;   (derangement (load i8) i8 (linear ptr)))
; ; (define-irreducible load-i16 ((ptr unsafe.pointer))
; ;   (derangement (load i16) i16 (linear ptr)))
; ; (define-irreducible load-i32 ((ptr unsafe.pointer))
; ;   (derangement (load i32) i32 (linear ptr)))
; (define-irreducible load-i64 ((ptr unsafe.pointer))
;   (derangement (load i64) i64 (linear ptr)))
; ; (define-irreducible load-f16 ((ptr unsafe.pointer))
; ;   (derangement (load f16) f16 (linear ptr)))
; ; (define-irreducible load-f32 ((ptr unsafe.pointer))
; ;   (derangement (load f32) f32 (linear ptr)))
; ; (define-irreducible load-f64 ((ptr unsafe.pointer))
; ;   (derangement (load f64) f64 (linear ptr)))
; (define-irreducible load-pointer ((ptr unsafe.pointer))
;   (derangement (load (pointer i8)) unsafe.pointer (linear ptr)))

(define-irreducible load-i8 ((ptr unsafe.pointer))
  (derangement (load i8) i8 (affine ptr)))
(define-irreducible load-i16 ((ptr unsafe.pointer))
  (derangement (load i16) i16 (affine ptr)))
(define-irreducible load-i32 ((ptr unsafe.pointer))
  (derangement (load i32) i32 (affine ptr)))
(define-irreducible load-i64 ((ptr unsafe.pointer))
  (derangement (load i64) i64 (affine ptr)))
(define-irreducible load-f16 ((ptr unsafe.pointer))
  (derangement (load f16) f16 (affine ptr)))
(define-irreducible load-f32 ((ptr unsafe.pointer))
  (derangement (load f32) f32 (affine ptr)))
(define-irreducible load-f64 ((ptr unsafe.pointer))
  (derangement (load f64) f64 (affine ptr)))
(define-irreducible load-pointer ((ptr unsafe.pointer))
  (derangement (load (pointer i8)) unsafe.pointer (affine ptr)))


(define load-i8-with-index ((ptr unsafe.pointer) (index i64))
  (load-i8 (add-pointer ptr (mul-i64 1 index))))
(define load-i16-with-index ((ptr unsafe.pointer) (index i64))
  (load-i16 (add-pointer ptr (mul-i64 2 index))))
(define load-i32-with-index ((ptr unsafe.pointer) (index i64))
  (load-i32 (add-pointer ptr (mul-i64 4 index))))
(define load-i64-with-index ((ptr unsafe.pointer) (index i64))
  (load-i64 (add-pointer ptr (mul-i64 8 index))))
(define load-f16-with-index ((ptr unsafe.pointer) (index i64))
  (load-f16 (add-pointer ptr (mul-i64 2 index))))
(define load-f32-with-index ((ptr unsafe.pointer) (index i64))
  (load-f32 (add-pointer ptr (mul-i64 4 index))))
(define load-f64-with-index ((ptr unsafe.pointer) (index i64))
  (load-f64 (add-pointer ptr (mul-i64 8 index))))
(define load-pointer-with-index ((ptr unsafe.pointer) (index i64))
  (load-pointer (add-pointer ptr (mul-i64 8 index))))

; (define-irreducible load-i8-with-index ((ptr unsafe.pointer) (index i64))
;   (witness (product unsafe.pointer i8)
;     (with identity.bind
;       (let ptr-mod (add-pointer-mod &ptr (mul-i64 1 index)))
;       (let value (load-i8 &ptr-mod))
;       (tuple ptr value))))


; (define-irreducible load-i64-with-index ((ptr unsafe.pointer) (index i64))
;   (witness (product unsafe.pointer i64)
;     (with identity.bind
;       (let ptr-mod (add-pointer-mod &ptr (mul-i64 8 index)))
;       (let value (load-i64 &ptr-mod))
;       (tuple ptr value))))

; (define-irreducible load-pointer-with-index ((ptr unsafe.pointer) (index i64))
;   (witness (product unsafe.pointer unsafe.pointer)
;     (with identity.bind
;       (let ptr-mod (add-pointer-mod &ptr (mul-i64 8 index)))
;       (let value (load-pointer &ptr-mod))
;       (tuple ptr value))))

; ; `(,(store i8) some-pointer value)みたいにして使う。
; (define-macro store (low-type)
;   (begin-meta
;     (let ptr (meta.leaf.new-symbol `ptr))
;     (let value (meta.leaf.new-symbol `value))
;     (let high-type (meta.leaf.new-symbol `high-type))
;     (lambda `((,high-type tau) (,ptr unsafe.pointer) (,value ,high-type))
;       `(derangement (store ,low-type) top (affine ,ptr) (affine ,value)))))

; ; こうしておくと、((load-mod i8) foo bar) みたいに使えて便利。
; (define-macro load (low-type)
;   (begin-meta
;     (let high-type (meta.leaf.new-symbol `high-type))
;     (let ptr (meta.leaf.new-symbol `ptr))
;     (lambda `((,high-type tau) (,ptr unsafe.pointer))
;       `(derangement (load ,low-type) ,high-type (affine ,ptr)))))

; (define-macro store-with-offset (low-type offset)
;   (begin-meta
;     (let q (meta.leaf.new-symbol `pointer))
;     (let ptr (meta.leaf.new-symbol `ptr))
;     (let value (meta.leaf.new-symbol `value))
;     (let high-type (meta.leaf.new-symbol `high-type))
;     (lambda `((,high-type tau) (,value ,high-type) (,ptr unsafe.pointer))
;       (with `identity.bind
;         `(let ,q (memory.add-pointer ,ptr ,offset))
;         `(,(memory.store low-type) ,high-type ,q ,value)
;         `top.unit))))

; (define-macro load-with-offset (low-type offset)
;   (begin-meta
;     (let q (meta.leaf.new-symbol `pointer))
;     (let value (meta.leaf.new-symbol `value))
;     (let ptr (meta.leaf.new-symbol `ptr))
;     (let high-type (meta.leaf.new-symbol `high-type))
;     (lambda `((,high-type tau) (,ptr unsafe.pointer))
;       (with `identity.bind
;         `(let ,q (memory.add-pointer ,ptr ,offset))
;         `(let ,value (,(memory.load low-type) ,high-type ,q))
;         value))))

; (define-macro store-with-index (low-type index)
;   (begin-meta
;     (let elem-size (meta.leaf.from-int (meta.size-of low-type)))
;     (store-with-offset low-type `(mul-i64 ,elem-size ,index))))

; (define-macro load-with-index (low-type index)
;   (begin-meta
;     (let elem-size (meta.leaf.from-int (meta.size-of low-type)))
;     (load-with-offset low-type `(mul-i64 ,elem-size ,index))))

(end memory)
