include "./language.neut"

include "./sum.neut"

include "./bool.neut"

-- (include "./noesis.neut")

-- (include "./noema.neut")

define-data list (a : tau)
- nil
- cons a (list a)

section list

-- (define-macro new-internal (a vs)
--   (if-meta (meta.is-nil vs)
--     `(list.nil ,a)
--     `(list.cons ,a ,(meta.node.head vs) ,(new-internal a (meta.node.tail vs)))))

-- (define-macro-variadic new (a vs)
--   (new-internal a vs))

define head (a : tau) (xs : list a) : option a =
  match xs with
  - nil ->
    option.none a
  - cons y ys ->
    option.some a y
  end

-- (define length-internal
--   ((s subject)
--    (a tau)
--    (xs (noema s (list a)))
--    (acc i64))
--   (witness i64
--     (case-noetic xs
--       ((list.nil)
--         acc)
--       ((list.cons _ ys)
--         (length-internal s a ys (add-i64 acc 1))))))

-- ; (define length
-- ;   ((a tau)
-- ;    (xs (list a)))
-- ;   (witness (product (list a) i64)
-- ;     (with-region s
-- ;       (let xs-noema (noema.new s (list a) &xs))
-- ;       ((noesis.return s) (product (list a) i64) (tuple xs (length-internal s a xs-noema 0))))))

-- (define length
--   ((a tau)
--    (xs (list a)))
--   (witness (product (list a) i64)
--     (with-subject s (xs)
--       ((noesis.return s) i64 (length-internal s a xs 0)))))

define append (a : tau) (xs : list a) (ys : list a) : list a =
  match xs with
  - list.nil -> ys
  - list.cons z zs ->
    cons a z (append a zs ys)
  end

define is-null (a : tau) (xs : list a) : bool =
  match xs with
  - nil ->
    bool.true
  - cons _ _ ->
    bool.false
  end

define map (a : tau) (b : tau) (f : a -> b) (xs : list a) : list b =
  match xs with
  - nil ->
    nil b
  - cons y ys ->
    cons b (f y) (map a b f ys)
  end

define return (a : tau) (x : a) : list a =
  list.cons a x (list.nil a)

define join (a : tau) (xss : list (list a)) : list a =
  match xss with
  - nil ->
    nil a
  - cons ys yss ->
    append a ys (join a yss)
  end

define bind (a : tau) (b : tau) (xs : list a) (k : a -> list b) : list b =
  join b (map a (list b) k xs)

end list
