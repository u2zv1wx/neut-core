(include "./foundation.neut")

(include "./functor.neut")

(include "./monad.neut")

(include "./identity.neut")

(define-data free ((g (hom tau tau)) (a tau))
  (pure (_ a))
  (impure
    (b tau)
    (_ (g b))
    (_ (hom b (free g a)))))

(section free)

(define map
  ((g (hom tau tau)))
  (witness (functor-type (free g _))
    (λ (a b f m)
      (case m
        ((pure x)
          (pure g b (f x)))
        ((impure p val k)
          (with identity.bind
            (let h
              (λ ((z p))
                ((map g) a b f (k z))))
            (impure g b p val h)))))))

(define as-functor
  ((g (hom tau tau)))
  (witness (functor (free g _))
    (functor.new
      (free g _)
      (free.map g))))

(define return
  ((g (hom tau tau)))
  (witness (return-type (free g _))
    (λ (a x)
      (pure g a x))))

(define bind
  ((g (hom tau tau)))
  (witness (bind-type (free g _))
    (λ (a b m k)
      (case m
        ((pure x)
          (k x))
        ((impure p val h)
          (impure g b p val
            (λ (v) ((bind g) a b (h v) k))))))))

(define as-monad
  ((g (hom tau tau)))
  (witness (monad (free g _))
    (monad.new
      (free g _)
      (free.as-functor g)
      (free.return g)
      (free.bind g))))

(end free)
