(include "./functor.neut")

(include "./monad.neut")

(define identity ((a tau))
  (witness tau
    a))

(section identity)

(define map
  (witness (functor-type identity)
    (lambda (_ _ f value)
      (f value))))

(define return
  (witness (return-type identity)
    (lambda (_ x)
      x)))

(define bind
  (witness (bind-type identity)
    (lambda (_ _ comp k)
      (k comp))))

(define as-functor
  (witness (functor identity)
    (functor.new
      identity
      identity.map)))

(define as-monad
  (witness (monad identity)
    (monad.new
      identity
      identity.as-functor
      identity.return
      identity.bind)))

(end identity)
