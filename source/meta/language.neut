(include "./base.neut")

(include "./node.neut")

(include "./leaf.neut")

(include "./pair.neut")

(include "./bool.neut")

(use meta)

(use meta.node)

(define-macro Π (args body)
  `(Π ,args ,body))

(define-macro Π-introduction (args body)
  `(Π-introduction ,args ,body))

(define-macro-variadic Π-elimination (fun args)
  `(Π-elimination ,fun @,args))

(define-macro fix (self args body)
  `(fix ,self ,args ,body))

(define-macro-variadic enum-elimination (value clauses)
  `(enum-elimination ,value @,clauses))

(define-macro question (e)
  `(question ,e))

;
; statements
;

(define-macro declare-constant (name t)
  `(declare-constant ,name ,t))

(define-macro-variadic declare-enum (rest)
  `(declare-enum @,rest))

(define-macro-variadic define (f rest)
  (if-meta (is-nil (tail rest))
    `(define ,f ,(head rest))
    `(define ,f (fix ,f ,(head rest) ,(head (tail rest))))))

(define-macro define-irreducible (f xts body)
  `(define ,f (fix-irreducible ,f ,xts ,body)))

(define-macro define-resource-type (name discarder copier)
  `(define-resource-type ,name ,discarder ,copier))

(define-macro set-as-opaque (x)
  `(set-as-opaque ,x))

(define-macro set-as-irreducible (x)
  `(set-as-irreducible ,x))

(define-macro-variadic statement (stmt-list)
  `(statement @,stmt-list))

;
; auxiliary macros
;

; (define-macro type
;   tau)

; (define-macro universe
;   type)

(define-macro forall (args t)
  `(Π ,args ,t))

(define-macro Pi (args t)
  `(Π ,args ,t))

; (define-macro lambda
;   Π-introduction)

(define-macro lambda (xts e)
  `(Π-introduction ,xts ,e))

; (define-macro λ
;   Π-introduction)

(define-macro λ (xts e)
  `(Π-introduction ,xts ,e))

(define-macro assume (xts e)
  `(Π-introduction ,xts ,e))

(define-macro witness (t e)
  (begin-meta
    (let sym (leaf.new-symbol `wit))
    `(,(λ `((,sym ,t)) sym) ,e)))

(define-macro hom-internal (ts)
  (if-meta (is-nil (tail ts))
    (head ts)
    (Π `((_ ,(head ts))) (hom-internal (tail ts)))))

(define-macro-variadic hom (ts)
  (hom-internal ts))

(define-macro theorem (x t e)
  `(let (,x ,t) ,e))

(define-macro-variadic switch (value clauses)
  `(enum-elimination ,value @,clauses))

(define-macro if (cond on-true on-false)
  (switch cond
    `(bool.true ,on-true)
    `(bool.false ,on-false)))

(define-macro sigma (xts t)
  (begin-meta
    (let sym (leaf.new-symbol `sig))
    (forall `((,sym tau)
              (_ ,(forall `(@,xts (_ ,t)) sym)))
             sym)))

(define-macro exists (xts t)
  (sigma xts t))

(define-macro product-internal (ts)
  (begin-meta
    (let sym (leaf.new-symbol `prod))
    (Π `((,sym tau)
         (_ ,(Π (map (lambda-meta (t) `(_ ,t)) ts) sym)))
        sym)))

(define-macro-variadic product (ts)
  (product-internal ts))

(define-macro sigma-introduction-internal (es)
  (begin-meta
    (let Z (leaf.new-symbol `sig))
    (let k (leaf.new-symbol `sig-k))
    (lambda
      `((,Z tau)
        (,k ,(Π (map (lambda-meta (x) `(_ *)) es) Z)))
      `(,k @,es))))

(define-macro-variadic sigma-introduction (es)
  (sigma-introduction-internal es))

(define-macro sigma-elimination (xts e1 e2)
  `(,e1 * ,(lambda xts e2)))

(define-macro-variadic tuple (es)
  (sigma-introduction-internal es))

(define-macro-variadic construct (es)
  (sigma-introduction-internal es))

(define-macro-variadic tensor (ts)
  `(tensor @,ts))

(define-macro-variadic tensor-introduction (es)
  `(tensor-introduction @,es))

(define-macro tensor-elimination (xts e1 e2)
  `(tensor-elimination ,xts ,e1 ,e2))

(define-macro is-borrowed-var-meta (x)
  (if-meta (is-node x)
    `()
    (leaf.equal `& (head (leaf.uncons x)))))

(define-macro take-borrowed-vars-meta (xs)
  (map (lambda-meta (x) (nth 1 (leaf.uncons x))) (filter is-borrowed-var-meta xs)))

(define-macro drop-char-meta (ch x)
  (if-meta (is-node x)
    x
    (begin-meta
      (let c-rest (leaf.uncons x))
      (if-meta (leaf.equal (nth 0 c-rest) ch)
        (nth 1 c-rest)
        x))))

(define-macro obtain-borrow-info-meta (xs)
  (if-meta (is-leaf xs)
    `(()
      ,xs)
    `(,(take-borrowed-vars-meta xs)
      ,(map (lambda-meta (x) (drop-char-meta `& x)) xs))))

; fixme: (monadic) delimited continuationもたぶんカンタンに実装できるのでやってみるとよい。
;    (with bind
;      (let-shift x k body)
;      rest)
; ~> (with bind
;      (let k (lambda (z) (with bind (let x z) rest)))
;      body)
; みたいなノリでいけるはず。kの結果がwithで包まれていることが、resetの追加に相当する。
; fixme: ((let (x1 x2 x3) e) ...)を(sigma-elim (x1 x2 x3) e ...)として処理できるようにする。let-tupleとかでもよい。
(define-macro with-internal (bind es)
  (if-meta (is-nil (tail es))
    (head es)
    (begin-meta
      (let e (head es))
      (let rest (tail es))
      (cond-meta
        ((is-leaf e)
         `(,bind * * ,e ,(λ `(_) (with-internal bind rest))))
        ((is-node (nth 0 e))
          (with-internal bind `((let _ ,e) @,rest)))
        ((bool.not (leaf.equal (nth 0 e) `let))
           (with-internal bind `((let _ ,e) @,rest)))
        (begin-meta
          (let var-name (nth 1 e))
          (let let-body (tail (tail e)))
          (let last-term (last let-body))
          (let borrow-info (obtain-borrow-info-meta last-term))
          (let borrow-var-list (nth 0 borrow-info))
          (let var-list `(@,borrow-var-list ,var-name))
          (let s (leaf.new-symbol `with-sig))
          (if-meta (is-nil borrow-var-list)
            `(,bind * * ,(with-internal bind let-body) ,(λ `(,var-name) (with-internal bind rest)))
            (with-internal bind
              `((let ,s @,`(@,(init let-body) ,(nth 1 borrow-info)))
                ,(sigma-elimination var-list s (with-internal bind rest))))))))))

(define-macro-variadic with (bind es)
  (with-internal bind es))

(define-macro-variadic with-region (s rest)
  `(noesis.run * (Π-introduction ((,s subject)) ,(with-internal `(noesis.bind s) rest))))

(define-macro-variadic destruct (e xts rest)
  (sigma-elimination xts e (with-internal `identity.bind rest)))

(define-macro-variadic reduce (es)
  (with-internal `identity.bind es))

(define-macro to-constructor (lam-args base-type a xts bt)
  (begin-meta
    (let constructor-name (leaf.concat a `. (head bt)))
    (let bar (map (pair.map-left leaf.replace-if-hole _) (tail bt)))
    (let constructor-args `(@,xts @,bar))
    (let inductive-type `(,a @,(map head xts)))
    (let args (map head bar))
    (define constructor-name constructor-args
      (witness inductive-type
        `(unsafe.cast ,base-type ,inductive-type
           (Π-introduction-constructor ,a ,constructor-name ,lam-args
             (,(head bt) @,args)))))))

; fixme: xtsのほうで名前が重複していてもエラーになるのでreplace-if-holeをほどこすこと。
; fixme: コンストラクタの名前をそのまま使うと、その名前の変数がすでに定義されていたときに壊れるので修正。
; たとえばtrueが (i1 1) で定義されてるときに (data bool () (true) (false)) ってやると壊れる。
; 対策としては、trueって名前のかわりにbool.trueって名前を使うようにすればよいでしょう。
; useのほうが優先されるように変更したからこういう調整が必要になってる。
(define-macro-variadic define-data (a xts bts)
  (begin-meta
    (let Z (leaf.new-symbol `Z))
    (let inductive-type `(,a @,(map head xts)))
    ; definition of type
    (let type-list (map (lambda-meta (ts) `(,(head ts) ,(Pi (tail ts) Z))) bts))
    (let lam-args `((,Z tau) @,type-list))
    (let base-type (Pi lam-args Z))
    (let formation-rule
      (define a xts base-type))
    ; definition of constructors
    (let introduction-rule-list (map (to-constructor lam-args base-type a xts _) bts))
    ; get list of constructor names
    (let bs (map (leaf.concat a `. _) (map head bts)))
    ; summing up the result
    `(statement
        ,formation-rule
        (set-as-opaque ,a)
        (set-as-data ,a ,(meta.leaf.from-int (length xts)) @,bs)
        @,introduction-rule-list
        )))

(define-macro codata.generate-projection (name xts yts y result-type)
  (begin-meta
    (let form-args (map head xts))
    (let app `(,name @,form-args))
    (let record-var (leaf.new-symbol `rec))
    (let base-args `(@,xts (,record-var ,app)))
    (let case (leaf.concat name `.case))
    (let proj-type (forall base-args result-type))
    `(define (,(leaf.concat name `. y) ,proj-type)
       ,(lambda base-args
          `(case ,record-var ((,(leaf.concat name `.new) @,yts) ,y))))))

(define-macro-variadic define-codata (name xts yts)
  (begin-meta
    (let xs (map head xts))
    (let proj-name-list (map head yts))
    (let name-list (map (leaf.concat name `. _) proj-name-list))
    (let elimination-rule-list
      (map (lambda-meta (yt) (codata.generate-projection name xts yts (nth 0 yt) (nth 1 yt))) yts))
    ; (dump elimination-rule-list)
    `(statement
       ,(define-data name xts
          `(new @,yts))
       @,elimination-rule-list)))
