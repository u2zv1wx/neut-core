(include "./base.neut")

(include "./leaf.neut")

(include "./node.neut")

(section meta.pair)

(define-macro first (p)
  (meta.node.nth 0 p))

(define-macro second (p)
  (meta.node.nth 1 p))

(define-macro map-right (f p)
  `(,(first p) ,(f (second p))))

(define-macro map-left (f p)
  `(,(f (first p)) ,(second p)))

; functor map
(define-macro map
  map-right)

; monad return
(define-macro unit (p)
  `(,meta.leaf.unit ,p))

; monad bind
; e.g. (join `(foo (bar buz))) ~> `(foobar buz)
(define-macro join (pp)
  `(,(meta.leaf.mul
       (first pp)
       (first (second pp)))
    ,(second (second pp))))

(define-macro swap (p)
  `(,(second p) ,(first p)))

(end meta.pair)
