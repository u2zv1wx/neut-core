include "./foundation.neut"

define-enum bool
- true <- 1
- false <- 0

section bool

define and (b1 : bool) (b2 : bool) : bool =
  let b1' = unsafe.cast bool i1 b1 in
  let b2' = unsafe.cast bool i1 b2 in
  unsafe.cast i1 bool (and-i1 b1' b2')

define or (b1 : bool) (b2 : bool) : bool =
  let b1' = unsafe.cast bool i1 b1 in
  let b2' = unsafe.cast bool i1 b2 in
  unsafe.cast i1 bool (or-i1 b1' b2')

define xor (b1 : bool) (b2 : bool) : bool =
  let b1' = unsafe.cast bool i1 b1 in
  let b2' = unsafe.cast bool i1 b2 in
  unsafe.cast i1 bool (xor-i1 b1' b2')

define not (b : bool) : bool =
  if b then
    false
  else
    true
  end

end bool

-- (include "./foundation.neut")

-- (define-enum bool
--   (true 1)
--   (false 0))

-- (section bool)

-- (define and ((b1 bool) (b2 bool))
--   (witness bool
--     (unsafe.cast i1 bool
--       (add-i1
--         (unsafe.cast bool i1 b1)
--         (unsafe.cast bool i1 b2)))))

-- (define or ((b1 bool) (b2 bool))
--   (witness bool
--     (unsafe.cast i1 bool
--       (or-i1
--         (unsafe.cast bool i1 b1)
--         (unsafe.cast bool i1 b2)))))

-- (define not ((b bool))
--   (witness bool
--     (if b
--       false
--       true)))

-- (define xor ((b1 bool) (b2 bool))
--   (witness bool
--     (unsafe.cast i1 bool
--       (xor-i1
--         (unsafe.cast bool i1 b1)
--         (unsafe.cast bool i1 b2)))))

-- (end bool)
