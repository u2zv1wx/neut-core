(include "./foundation.neut")

(include "./functor.neut")

(include "./bool.neut")

(define return-type ((m (hom tau tau)))
  (Π
    ((a tau)
     (_ a))
    (m a)))

(define bind-type ((m (hom tau tau)))
  (Π
    ((a tau)
     (b tau)
     (_ (m a))
     (_ (hom a (m b))))
    (m b)))

(define-codata monad ((m (hom tau tau)))
  (as-functor
    (functor m))
  (return
    (return-type m))
  (bind
    (bind-type m)))

(section monad)

(define compose
  ((m (hom tau tau))
   (a tau)
   (b tau)
   (c tau)
   (M (monad m))
   (f (hom a (m b)))
   (g (hom b (m c))))
  (witness (hom a (m c))
    (lambda (x)
      (with (bind m M)
        (let tmp (f x))
        (g tmp)))))

(define when
  ((f (hom tau tau))
   (M (monad f))
   (condition bool)
   (comp (f top)))
  (witness (f top)
    (if condition
      comp
      ((return f M) top top.unit))))

(end monad)
