(include "./foundation.neut")

(include "./monad.neut")

(define subject
  tau)

; (set-as-opaque subject)

(define-opaque noesis ((s subject) (a tau))
  a)

; (set-as-opaque noesis)

(section noesis)

(use subject)

(define return ((s subject))
  (witness (Î  ((a tau) (x a)) (noesis s a))
    (lambda ((a tau) (x a))
      (unsafe.cast a (noesis s a) x))))

(define bind ((s subject))
  (witness (bind-type (noesis s _))
    (lambda ((a tau) (b tau) (m (noesis s a)) (k (hom a (noesis s b))))
      (k (unsafe.cast (noesis s a) a m)))))

(define run ((a tau) (comp (forall ((s subject)) (noesis s a))))
  (witness a
    (unsafe.cast (noesis (unsafe.cast i64 subject 0) a) a (comp (unsafe.cast i64 subject 0)))))

(end noesis)
