(include "./foundation.neut")

(include "./identity.neut")

(include "./memory.neut")

(include "./raw-string.neut")

(use unsafe)

(define-resource-type safe-string
  ; ptr -> ()
  (lambda (x)
    (with identity.bind
      (let p (cast pointer (tensor i64 pointer) x))
      (tensor-elimination (_ value) p
        (with identity.bind
          (free pointer value)
          (tensor-introduction)))))
  ; ptr -> (ptr, ptr)
  (lambda (x)
    (with identity.bind
      (let p (cast pointer (tensor i64 pointer) x))
      (tensor-elimination (length value) p
        (with identity.bind
          (let q (malloc length))
          (copy-i8-array q value length 0)
          (tensor-introduction
            (cast (tensor i64 pointer) pointer (tensor-introduction length q))
            (cast (tensor i64 pointer) pointer (tensor-introduction length value))))))))

(use os)

(define-macro safe-string.new (str)
  `(unsafe.cast (tensor i64 unsafe.pointer) safe-string
     (tensor-introduction
       ,(meta.leaf.from-int (meta.node.length (meta.leaf.string-to-u8-list str)))
       ,(raw-string.new str))))

(define safe-string.length ((str safe-string))
  (witness (product safe-string i64)
    admit))

(define print-character ((value i8))
  (with identity.bind
    (let p (malloc 1))
    (store-with-offset p i8 value 0)
    (let len (write stdout &p 1))
    (free pointer p)
    top.unit))

(define safe-string.print ((str safe-string))
  (witness (product safe-string i64)
    (with identity.bind
      (let str' (cast safe-string (tensor i64 pointer) str))
      (tensor-elimination (n content) str'
        (with identity.bind
          (let wrote-length (write stdout &content n))
          ; (print-character 97)
          (let str'' (cast (tensor i64 pointer) safe-string (tensor-introduction n content)))
          (tuple str'' wrote-length))))))

(define-macro safe-string.print-literal (str)
  `(safe-string.print ,(safe-string.new str)))

(unuse os)
