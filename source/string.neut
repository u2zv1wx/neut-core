include "./system.neut"
include "./memory.neut"
include "./array.neut"

define-opaque string : tau =
  i8-array

define unsafe.create-new-string (len : i64) (content : unsafe.pointer) : string =
  let ptr = memory.allocate 16 in
  let _ = memory.store-i64-with-index ptr 0 len in
  let _ = memory.store-pointer-with-index ptr 1 content in
  unsafe.cast unsafe.pointer string ptr

define print-character (value : i8) : top =
  let p = memory.allocate 1 in
  let _ = memory.store-i8-with-index p 0 value in
  let len = os.write os.stdout p 1 in
  let _ = memory.deallocate p in
  top.unit

define string.print (str : string) : product string i64 =
  let ptr = unsafe.cast string unsafe.pointer str in
  let n = memory.load-i64 ptr in
  let content = memory.load-pointer-with-index ptr 1 in
  let wrote-length  = os.write os.stdout content n in
  let str = unsafe.cast unsafe.pointer string ptr in
  (str, wrote-length)

-- reduce
--   string.print "hello, world!\n"

-- (define-macro string.print-literal (str)
--   `(string.print ,(string.new str)))

-- ; (reduce
-- ;   ; (let ptr (memory.allocate 3))
-- ;   ; (memory.store-i8-with-index 10 &ptr 0)
-- ;   ; (memory.store-i8-with-index 20 &ptr 1)
-- ;   ; (memory.store-i8-with-index 30 &ptr 2)
-- ;   ; ; (let outer (tensor-introduction (i64 3) ptr))
-- ;   ; (let outer (memory.allocate 2))
-- ;   ; ; ; (memory.store-i64-with-index 2 &outer 0)
-- ;   ; (memory.store-i64-with-index 3 &outer 0)
-- ;   ; (memory.store-pointer-with-index ptr &outer 1)
-- ;   ; (let test (unsafe.cast * i8-array outer))
-- ;   ; (let _ test)
-- ;   ; (let _ test)
-- ;   ; (let _ test)

-- ;   ; (let test2 (i8-array-introduction (i8 10) (i8 20) (i8 30)))
-- ;   ; (let _ test2)
-- ;   ; (let _ test2)
-- ;   ; (let _ test2)

-- ;   (let hello (string.new "hello\n"))
-- ;   (let foo hello)
-- ;   ; (string.print &hello)
-- ;   (string.print &hello)
-- ;   (let bar (string.print hello))
-- ;   (let _ hello)

-- ;   ; (let hello (string.new "hello\n"))
-- ;   ; (let foo hello)
-- ;   ; (string.print &hello)
-- ;   ; (string.print &hello)
-- ;   ; (let bar (string.print hello))
-- ;   ; (let _ hello)


-- ;   ; (print-character 97)
-- ;   ; (print-character 97)
-- ;   ; (print-character 97)

-- ;   ; (let hello (string.new "hella"))
-- ;   ; ; (let hello (string.new "hello\n"))
-- ;   ; (string.print &hello)
-- ;   ; (string.print &hello)
-- ;   ; ; (string.print &hello)
-- ;   ; ; (string.print &hello)

-- ; ; (memory.deallocate unsafe.pointer outer)
-- ;   ; (memory.deallocate unsafe.pointer ptr)
-- ; ; (memory.deallocate unsafe.pointer ptr)
-- ;   ; (memory.deallocate unsafe.pointer outer)

-- ; ; (let ptr (memory.allocate 1))
-- ;   ; (memory.store-i8 &ptr 10)
-- ;   ; (let outer (memory.allocate 1))
-- ;   ; ; (memory.store-i64-with-index 2 &outer 0)
-- ;   ; (memory.store-pointer &outer ptr)
-- ;   ; (memory.deallocate unsafe.pointer ptr)
-- ;   ; (memory.deallocate unsafe.pointer outer)
-- ;   ; (let test (unsafe.cast unsafe.pointer i8-array outer))
-- ;   ; (let test (i8-array-introduction (i8 10) (i8 20)))
-- ;   ; (let _ test)
-- ;   ; (let _ test)
-- ;   ; (let _ test)
-- ;   ; (let test (unsafe.cast * unsafe.pointer (i8-array-introduction (i8 10) (i8 20))))
-- ;   ; (let content (memory.load-pointer-with-index &test 1))
-- ;   ; (memory.deallocate unsafe.pointer test)
-- ;   ; (memory.deallocate unsafe.pointer content)
-- ; ; (let _ test)
-- ;   ; (let _ test)
-- ;   ; (let _ test)
-- ;   ; (let str (string.new "hello"))
-- ;   ; (string.print &str)
-- ;   ; (string.print &str)
-- ; ; (let foo str)
-- ;   ; (let foo str)
-- ;   ; (let foo str)
-- ;   ; (let foo str)
-- ;   ; (let foo str)
-- ;   ; (let foo str)
-- ;   ; (let foo str)
-- ;   top.unit)
