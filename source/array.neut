(include "./memory.neut")

; helper functions to define safe arrays

(define array-discard ((ptr unsafe.pointer))
  (with identity.bind
    (let content (memory.load-pointer-with-index ptr 1))
    (memory.deallocate unsafe.pointer content)
    (memory.deallocate unsafe.pointer ptr)))

(define copy-array-elements
  ((dest unsafe.pointer)
   (src unsafe.pointer)
   (len i64)
   (count i64)
   (elem-type tau)
   (load-function (Π ((_ unsafe.pointer) (_ i64)) elem-type))
   (store-function (Π ((_ elem-type) (_ unsafe.pointer) (_ i64)) top)))
  (witness top
    (if (icmp-sge-i64 count len)
      top.unit
      (with identity.bind
        (let value (load-function src count))
        (store-function value dest count)
        (copy-array-elements dest src len (add-i64 count 1) elem-type load-function store-function)))))

(define array-copy
  ((src unsafe.pointer)
   (size i64)
   (f (Π ((_ unsafe.pointer) (_ unsafe.pointer) (_ i64) (_ i64)) top)))
  (with identity.bind
    (let length (memory.load-i64 src))
    (let content (memory.load-pointer-with-index src 1))
    (let dest (memory.allocate (mul-i64 length size)))
    (f dest content length 0)
    (let outer (memory.allocate 16))
    (memory.store-i64 length outer)
    (memory.store-pointer-with-index dest outer 1)
    outer))

(define copy-i8-array-elements ((dest unsafe.pointer) (src unsafe.pointer) (len i64) (count i64))
  (copy-array-elements dest src len count i8 memory.load-i8-with-index memory.store-i8-with-index))
(define copy-i16-array-elements ((dest unsafe.pointer) (src unsafe.pointer) (len i64) (count i64))
  (copy-array-elements dest src len count i16 memory.load-i16-with-index memory.store-i16-with-index))
(define copy-i32-array-elements ((dest unsafe.pointer) (src unsafe.pointer) (len i64) (count i64))
  (copy-array-elements dest src len count i32 memory.load-i32-with-index memory.store-i32-with-index))
(define copy-i64-array-elements ((dest unsafe.pointer) (src unsafe.pointer) (len i64) (count i64))
  (copy-array-elements dest src len count i64 memory.load-i64-with-index memory.store-i64-with-index))
(define copy-f16-array-elements ((dest unsafe.pointer) (src unsafe.pointer) (len i64) (count i64))
  (copy-array-elements dest src len count f16 memory.load-f16-with-index memory.store-f16-with-index))
(define copy-f32-array-elements ((dest unsafe.pointer) (src unsafe.pointer) (len i64) (count i64))
  (copy-array-elements dest src len count f32 memory.load-f32-with-index memory.store-f32-with-index))
(define copy-f64-array-elements ((dest unsafe.pointer) (src unsafe.pointer) (len i64) (count i64))
  (copy-array-elements dest src len count f64 memory.load-f64-with-index memory.store-f64-with-index))

(define i8-array-copy ((src unsafe.pointer))
  (array-copy src 1 copy-i8-array-elements))
(define i16-array-copy ((src unsafe.pointer))
  (array-copy src 2 copy-i16-array-elements))
(define i32-array-copy ((src unsafe.pointer))
  (array-copy src 4 copy-i32-array-elements))
(define i64-array-copy ((src unsafe.pointer))
  (array-copy src 8 copy-i64-array-elements))
(define f16-array-copy ((src unsafe.pointer))
  (array-copy src 2 copy-f16-array-elements))
(define f32-array-copy ((src unsafe.pointer))
  (array-copy src 4 copy-f32-array-elements))
(define f64-array-copy ((src unsafe.pointer))
  (array-copy src 8 copy-f64-array-elements))

; helper functions to introduce/eliminate safe arrays

(define-macro create-array (low-type rest)
  `(derangement (create-array ,low-type) @,rest))

(define-macro array-introduction (low-type rest)
  (begin-meta
    (let arr (meta.leaf.new-symbol `array))
    (let len-info (meta.leaf.from-int (meta.node.length rest)))
    (let ptr (meta.leaf.new-symbol `ptr))
    (with `identity.bind
     `(let ,arr ,(create-array low-type rest))
     `(let ptr (memory.allocate 16))
     `(memory.store-i64-with-index ,len-info ptr 0)
     `(memory.store-pointer-with-index ,arr ptr 1)
     `ptr)))

(define array-access
  ((a tau)
   (xs a)
   (index i64)
   (elem-type tau)
   (f (Π ((_ unsafe.pointer) (_ i64)) elem-type)))
  (witness (product a elem-type)
    (with identity.bind
      (let ptr (unsafe.cast a unsafe.pointer xs))
      (let content (memory.load-pointer-with-index ptr 1))
      (let value (f content index))
      (let xs (unsafe.cast unsafe.pointer a ptr))
      (tuple xs value))))

; type definitions

(define-resource-type i8-array array-discard i8-array-copy)
(define-resource-type i16-array array-discard i16-array-copy)
(define-resource-type i32-array array-discard i32-array-copy)
(define-resource-type i64-array array-discard i64-array-copy)
(define-resource-type f16-array array-discard f16-array-copy)
(define-resource-type f32-array array-discard f32-array-copy)
(define-resource-type f64-array array-discard f64-array-copy)

; introduction rules

(define-macro i8-array.new (rest) `(unsafe.cast unsafe.pointer i8-array ,(array-introduction `i8 rest)))
(define-macro i16-array.new (rest) `(unsafe.cast unsafe.pointer i16-array ,(array-introduction `i16 rest)))
(define-macro i32-array.new (rest) `(unsafe.cast unsafe.pointer i32-array ,(array-introduction `i32 rest)))
(define-macro i64-array.new (rest) `(unsafe.cast unsafe.pointer i64-array ,(array-introduction `i64 rest)))
(define-macro f16-array.new (rest) `(unsafe.cast unsafe.pointer f16-array ,(array-introduction `f16 rest)))
(define-macro f32-array.new (rest) `(unsafe.cast unsafe.pointer f32-array ,(array-introduction `f32 rest)))
(define-macro f64-array.new (rest) `(unsafe.cast unsafe.pointer f64-array ,(array-introduction `f64 rest)))
(define-macro-variadic i8-array-introduction  (rest) (i8-array.new  rest))
(define-macro-variadic i16-array-introduction (rest) (i16-array.new rest))
(define-macro-variadic i32-array-introduction (rest) (i32-array.new rest))
(define-macro-variadic i64-array-introduction (rest) (i64-array.new rest))
(define-macro-variadic f16-array-introduction (rest) (f16-array.new rest))
(define-macro-variadic f32-array-introduction (rest) (f32-array.new rest))
(define-macro-variadic f64-array-introduction (rest) (f64-array.new rest))

; elimination rules

(define i8-array-access ((xs i8-array) (index i64))
  (array-access i8-array xs index i8 memory.load-i8-with-index))
(define i16-array-access ((xs i16-array) (index i64))
  (array-access i16-array xs index i16 memory.load-i16-with-index))
(define i32-array-access ((xs i32-array) (index i64))
  (array-access i32-array xs index i32 memory.load-i32-with-index))
(define i64-array-access ((xs i64-array) (index i64))
  (array-access i64-array xs index i64 memory.load-i64-with-index))
(define f16-array-access ((xs f16-array) (index i64))
  (array-access f16-array xs index f16 memory.load-f16-with-index))
(define f32-array-access ((xs f32-array) (index i64))
  (array-access f32-array xs index f32 memory.load-f32-with-index))
(define f64-array-access ((xs f64-array) (index i64))
  (array-access f64-array xs index f64 memory.load-f64-with-index))
