(include "./language.neut")

(declare-enum file-descriptor
  (stdin 0)
  (stdout 1)
  (stderr 2))

(section os)

(define stdin
  file-descriptor.stdin)

(define stdout
  file-descriptor.stdout)

(define stderr
  file-descriptor.stderr)

(use unsafe)

(define read ((in file-descriptor) (buf pointer) (len i64))
  (witness (product pointer i64)
    (derangement (syscall 0) i64 (affine in) (linear buf) (affine len))))

(define write ((out file-descriptor) (buf pointer) (len i64))
  (witness (product pointer i64)
    (derangement (syscall 1) i64 (affine out) (linear buf) (affine len))))

(define exit ((A tau) (status i64))
  (derangement (syscall 60) A (affine status)))

(define open ((path pointer) (flags i64) (mode i64))
  (witness (product pointer file-descriptor)
    (derangement (syscall 2) file-descriptor (linear path) (affine flags) (affine mode))))

(define close ((f file-descriptor))
  (witness i64
    (derangement (syscall 3) i64 (affine file-descriptor))))

(define fork ()
  (witness i64
    (derangement (syscall 57) i64)))

; (define rusage
;   (struct
;     i64   ; ru_utime           user CPU time used
;     i64   ; (microsec)
;     i64   ; ru_stime           system CPU time used
;     i64   ; (microsec)
;     i64   ; ru_maxrss;         maximum resident set size
;     i64   ; ru_ixrss;          integral shared memory size
;     i64   ; ru_idrss;          integral unshared data size
;     i64   ; ru_isrss;          integral unshared stack size
;     i64   ; ru_minflt;         page reclaims (soft page faults)
;     i64   ; ru_majflt;         page faults (hard page faults)
;     i64   ; ru_nswap;          swaps
;     i64   ; ru_inblock;        block input operations
;     i64   ; ru_oublock;        block output operations
;     i64   ; ru_msgsnd;         IPC messages sent
;     i64   ; ru_msgrcv;         IPC messages received
;     i64   ; ru_nsignals;       signals received
;     i64   ; ru_nvcsw;          voluntary context switches
;     i64)) ; ru_nivcsw;         involuntary context switches

; (declare-constant wait4
;   (Π
;     ((d i64)
;      (stat-loc (array 1 i64))
;      (options i64)
;      (usage rusage))
;     (product (array 1 i64) rusage i64)))

; (define sockaddr
;   (struct
;     i8    ; total length
;     i8    ; address family
;     i16   ; empty (4 byte so far)
;     i32   ; empty (8 byte so far)
;     i64)) ; empty (16 byte so far)

; (define sockaddr-in
;   (struct
;     i8    ; total length
;     i8    ; address family
;     i16   ; ipv4 port
;     i32   ; ipv4 addr
;     i64)) ; empty

; (define sockaddr-in6
;   (struct
;     i8    ; length of this struct
;     i8    ; AF_INET6
;     i16   ; Transport layer port
;     i32   ; IP6 flow information
;     i32   ; IP6 address
;     i32)) ; scope zone index

; (declare-constant bind
;   (Π
;     ((sock i64)
;      (address sockaddr)
;      (sock-len i64))
;     (product sockaddr i64)))

; (declare-constant accept
;   (Π
;     ((sock i64)
;      (address sockaddr)
;      (address-len (array 1 i64)))
;     (product sockaddr (array 1 i64) i64)))

; (declare-constant connect
;   (Π
;     ((sock i64)
;      (address sockaddr)
;      (address-len i64))
;     (product sockaddr i64)))

; (declare-constant socket
;   (Π
;     ((domain i64)
;      (socket-type i64)
;      (protocol i64))
;     i64))

; (declare-constant listen
;   (Π
;     ((sock i64)
;      (backlog i64))
;     i64))

(unuse unsafe)

(end os)


; --- asSyscallMaybe :: OS -> Arch -> T.Text -> Maybe (Syscall, [Arg])
; --- asSyscallMaybe os arch name =
; ---   case (os, arch) of
; ---     (OSLinux, Arch64)
; ---       | name == nsOS <> "read" ->
; ---         return (Right ("read", 0), [ArgUnused, ArgImm, ArgArray, ArgImm])
; ---       | name == nsOS <> "write" ->
; ---         return (Right ("write", 1), [ArgUnused, ArgImm, ArgArray, ArgImm])
; ---       | name == nsOS <> "open" ->
; ---         return (Right ("open", 2), [ArgUnused, ArgArray, ArgImm, ArgImm])
; ---       | name == nsOS <> "close" ->
; ---         return (Right ("close", 3), [ArgImm])
; ---       | name == nsOS <> "socket" ->
; ---         return (Right ("socket", 41), [ArgImm, ArgImm, ArgImm])
; ---       | name == nsOS <> "connect" ->
; ---         return (Right ("connect", 42), [ArgImm, ArgStruct, ArgImm])
; ---       | name == nsOS <> "accept" ->
; ---         return (Right ("accept", 43), [ArgImm, ArgStruct, ArgArray])
; ---       | name == nsOS <> "bind" ->
; ---         return (Right ("bind", 49), [ArgImm, ArgStruct, ArgImm])
; ---       | name == nsOS <> "listen" ->
; ---         return (Right ("listen", 50), [ArgImm, ArgImm])
; ---       | name == nsOS <> "fork" ->
; ---         return (Right ("fork", 57), [])
; ---       | name == nsOS <> "exit" ->
; ---         return (Right ("exit", 60), [ArgUnused, ArgImm])
; ---       | name == nsOS <> "wait4" ->
; ---         return (Right ("wait4", 61), [ArgImm, ArgArray, ArgImm, ArgStruct])
; ---       | otherwise ->
; ---         Nothing
