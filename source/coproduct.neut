(include "./foundation.neut")

(include "./functor.neut")

(include "./monad.neut")

(define-data coproduct ((e tau) (a tau))
  (left (_ e))
  (right (_ a)))

(section coproduct)

(define map
  ((e tau)
   (a tau)
   (b tau)
   (f (hom a b))
   (m (coproduct e a)))
  (witness (coproduct e b)
    (coproduct.case (coproduct e b) e a m
      (lambda (err)
        (left e b err))
      (lambda (val)
        (right e b (f val))))))

(define return
  ((e tau)
   (a tau)
   (x a))
  (witness (coproduct e a)
    (right e a x)))

(define bind
  ((e tau)
   (a tau)
   (b tau)
   (comp (coproduct e a))
   (k (hom a (coproduct e b))))
  (witness (coproduct e b)
    (coproduct.case (coproduct e b) e a comp
      (lambda (err)
        (left e b err))
      (lambda (val)
        (k val)))))

(define throw
  ((e tau)
   (a tau)
   (err e))
  (witness (coproduct e a)
    (left e a err)))

(define as-functor
  ((e tau))
  (witness (functor (coproduct e _))
    (functor.new
      (coproduct e _)
      (coproduct.map e _ _ _ _))))

(define as-monad
  ((e tau))
  (witness (monad (coproduct e _))
    (monad.new
      (coproduct e _)
      (as-functor e)
      (coproduct.return e _ _)
      (coproduct.bind e _ _ _ _))))

(end coproduct)
